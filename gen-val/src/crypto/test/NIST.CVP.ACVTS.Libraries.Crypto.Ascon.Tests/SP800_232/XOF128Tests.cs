using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NIST.CVP.ACVTS.Libraries.Math.Helpers;
using NUnit.Framework;

namespace NIST.CVP.ACVTS.Libraries.Crypto.Ascon.Tests.SP800_232;

[TestFixture]
[FastCryptoTest]
public class XOF128Tests
{
    private Crypto.Ascon.Ascon ascon = new Crypto.Ascon.Ascon();

    [Test]
    //1
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD10FF", 512)]
    //2
    [TestCase("00", "51430E0438ECDF642B393630D977625F5F337656BA58AB1E960784AC32A16E0D446405551F5469384F8EA283CF12E64FA72C426BFEBAEA3AA1529E2C4AB23A2F", 512)]
    //9
    [TestCase("0001020304050607", "8D1886F5D3EC4AF8D15B44BC62B74DA6EA91BC28FB82F9C34079B5ED6E38B6C951803D7DFB3C5E512A0EF5E4060062A6FD067F9C73EF9BEE527411BDA67FC896", 512)]
    //10
    [TestCase("000102030405060708", "DB3013BFBBD132DC1D3152FD955ED48F7CBB675E9AD2A2FECF92B74C957592E0C89959E81C16FD07EAD9EEB8E40359C497AA20258B43D87EC69AD0BB0993FD38", 512)]
    //804
    [TestCase
    public void ShouldXOFByteOrientedCorrectly(string messageString, string digestString, int digestLength)
    {
        byte[] message = StringToHexBytes(messageString);
        int messageBitLength = message.Length * 8;

        byte[] digestBytes = ascon.Xof128(message, messageBitLength, digestLength);

        string digest = "";

        for (int i = 0; i < digestBytes.Length; i++)
        {
            digest = digest + digestBytes[i].ToString("X2");
        }

        Assert.That(digest, Is.EqualTo(digestString));
    }

    [Test]
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD107F", 0, 511)]
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD10FF01", 0, 513)]
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD10FF01", 0, 515)]
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD10FF09", 0, 516)]
    [TestCase("", "473D5E6164F58B39DFD84AACDB8AE42EC2D91FED33388EE0D960D9B3993295C6AD77855A5D3B13FE6AD9E6098988373AF7D0956D05A8F1665D2C67D1A3AD10FF89", 0, 520)]
    [TestCase("01", "96CD23BF316E5D6D7330F2C9B1118979789D5561F9821E21401B1EB3338286A59EDEEDD98CBB6C376710C7714BC9D63991A10901D94DDF3BF3E0D3647A50D355", 1, 512)]
    public void ShouldXOFBitOrientedCorrectly(string messageString, string digestString, int messageBitLength, int digestLength)
    {
        byte[] message = StringToHexBytes(messageString);

        byte[] digestBytes = ascon.Xof128(message, messageBitLength, digestLength);

        string digest = "";

        for (int i = 0; i < digestBytes.Length; i++)
        {
            digest = digest + digestBytes[i].ToString("X2");
        }

        Assert.That(digest, Is.EqualTo(digestString));
    }

    [Test, Ignore("Debugging only")]
    [TestCase("000102030405060708090A0B0C0D0E0F", "10BFEDC5F6442D3E1D8C324878CE1DDF", 128, 128)]
    [TestCase("000102030405060708090A0B0C0D0E0F01", "ED0CECAF5510F137ADD594C99F404A1200", 129, 129)]
    public void GenerateIntermediateValuesCXOFBitOriented(string messageString, string digestString, int messageBitLength, int digestLength)
    {
        byte[] message = StringToHexBytes(messageString);

        Console.WriteLine("Ascon XOF128\n");

        Console.WriteLine("message = " + messageString);
        Console.WriteLine("messageLen = " + messageBitLength);
        Console.WriteLine("digestLen = " + digestLength + "\n");

        byte[] digestBytes = ascon.Xof128(message, messageBitLength, digestLength);

        string digest = "";

        for (int i = 0; i < digestBytes.Length; i++)
        {
            digest = digest + digestBytes[i].ToString("X2");
        }

        Console.WriteLine("\ndigest = " + digest);

        Assert.That(digest, Is.EqualTo(digestString));
    }

    [Test]
    public void ShouldXOFAllValuesNoAnswers()
    {
        for (int i = 1; i <= 128; i++)
        {
            var m = new BitArray(i, true);
            ascon.Xof128(m.ToBytes(), i, i);
        }
    }

    private byte[] StringToHexBytes(string input)
    {
        byte[] output = new byte[input.Length / 2];
        for (int i = 0; i < input.Length; i = i + 2)
        {
            int num = Convert.ToInt32(input.Substring(i, 2), 16);
            output[i / 2] = (byte)num;
        }
        return output;
    }
}
