using System;
using System.Text;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.Hash.cSHAKE;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC;
using NIST.CVP.ACVTS.Libraries.Crypto.Common.MAC.KMAC;
using NIST.CVP.ACVTS.Libraries.Crypto.cSHAKE;
using NIST.CVP.ACVTS.Libraries.Math;
using NIST.CVP.ACVTS.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.ACVTS.Libraries.Crypto.KMAC.Tests
{
    [TestFixture, FastCryptoTest]
    public class KmacTests
    {
        private KmacFactory _kmacFactory;

        [SetUp]
        public void Setup()
        {
            _kmacFactory = new KmacFactory(new cSHAKEWrapper());
        }

        [Test]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "e5780b0d3ea6f7d3a429c5706aa43a00fadbd7d49628839e3187243f456ee14e", "")]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "3b1fba963cd8b0b59e8c1a6d71888b7143651af8ba0a7070c0979e2811324aa5", "My Tagged Application")]
        [TestCase(1600, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "1f5b4e6cca02209e0dcb5ca635b89a15e271ecc760071dfd805faa38f9729230", "My Tagged Application")]
        [TestCase(256, 275, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "fb89a756507bb94e920943ea56a6ce202512e40cf7f6d79bbe380ba79f759dacd0d005", "My Function")]
        [TestCase(1607, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c748", "83ca4cba3addd49f363bad03da260880fb99ede3926d06b0c20a3db253185b80", "My Function")]
        [TestCase(256, 256, 2407, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "dea457f7eb7469f63f02b018da7400060d6164ef230bdeb7e73ccd8464f38725", "My Function")]
        public void ShouldKMAC128Correctly(int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customization)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);

            var subject = _kmacFactory.GetKmacInstance(256, false);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Assert.That(result.Success);
            Assert.That(result.Mac, Is.EqualTo(expectedResult));
        }

        [Test]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "e5780b0d3ea6f7d3a429c5706aa43a00fadbd7d49628839e3187243f456ee14e", "")]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "3b1fba963cd8b0b59e8c1a6d71888b7143651af8ba0a7070c0979e2811324aa5", "4d7920546167676564204170706c69636174696f6e")]
        public void ShouldKMACHexCustomizationCorrectly(int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customizationHex)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);
            var customization = new BitString(customizationHex);

            var subject = _kmacFactory.GetKmacInstance(256, false);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Assert.That(result.Success);
            Assert.That(result.Mac.ToHex(), Is.EqualTo(expectedResult.ToHex()));
        }

        [Test]
        [TestCase(32, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "20c570c31346f703c9ac36c61c03cb64c3970d0cfc787e9b79599d273a68d2f7f69d4cc3de9d104a351689f27cf6f5951f0103f33f4f24871024d9c27773a8dd", "My Tagged Application")]
        [TestCase(1600, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "75358cf39e41494e949707927cee0af20a3ff553904c86b08f21cc414bcfd691589d27cf5e15369cbbff8b9a4c2eb17800855d0235ff635da82533ec6b759b69", "")]
        [TestCase(1600, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "b58618f71f92e1d56c1b8c55ddd7cd188b97b4ca4d99831eb2699a837da2e4d970fbacfde50033aea585f1a2708510c32d07880801bd182898fe476876fc8965", "My Tagged Application")]
        [TestCase(256, 275, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "fd54c330cb49287cc877c859a77153ce4026caae11a9d1fbc07eb922b9b5743b1d3804", "My Function")]
        [TestCase(1607, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c748", "f248f8a2ee78cfdafb49761ce91c06ca5670b00d751eac7dc03c5350ba228faa", "My Function")]
        [TestCase(256, 256, 2407, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "2515394698556660ca02ba53d2f1713b7492b28e8f161686ae982941ec889297", "My Function")]
        public void ShouldKMAC256Correctly(int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customization)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);

            var subject = _kmacFactory.GetKmacInstance(512, false);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Assert.That(result.Success);
            Assert.That(result.Mac, Is.EqualTo(expectedResult));
        }

        [Test]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "cd83740bbd92ccc8cf032b1481a0f4460e7ca9dd12b08a0c4031178bacd6ec35", "")]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "31a44527b4ed9f5c6101d11de6d26f0620aa5c341def41299657fe9df1a3b16c", "My Tagged Application")]
        [TestCase(1600, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "47026c7cd793084aa0283c253ef658490c0db61438b8326fe9bddf281b83ae0f", "My Tagged Application")]
        [TestCase(32, 128, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "cd83740bbd92ccc8cf032b1481a0f446", "")]
        [TestCase(32, 128, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "31a44527b4ed9f5c6101d11de6d26f06", "My Tagged Application")]
        [TestCase(1600, 128, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "47026c7cd793084aa0283c253ef65849", "My Tagged Application")]
        [TestCase(256, 275, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "a989c1c81528a5a7be018962d89d9cbdd1ab82ad5bc35e1a3877cd7d819f5a18409407", "My Function")]
        [TestCase(1607, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c748", "124df5776fff8edde733ce31af9d4010afb2d78782d385ee68130e77a50ae7bd", "My Function")]
        [TestCase(256, 256, 2407, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "f7777da1d234b76441bb7297377be8c85214dd754e68a92beb83f7d397ae209e", "My Function")]
        public void ShouldKMACXOF128Correctly(int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customization)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);

            var subject = _kmacFactory.GetKmacInstance(256, true);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Assert.That(result.Success);
            Assert.That(result.Mac, Is.EqualTo(expectedResult));
        }

        [Test]
        [TestCase(32, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "1755133f1534752aad0748f2c706fb5c784512cab835cd15676b16c0c6647fa96faa7af634a0bf8ff6df39374fa00fad9a39e322a7c92065a64eb1fb0801eb2b", "My Tagged Application")]
        [TestCase(1600, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "ff7b171f1e8a2b24683eed37830ee797538ba8dc563f6da1e667391a75edc02ca633079f81ce12a25f45615ec89972031d18337331d24ceb8f8ca8e6a19fd98b", "")]
        [TestCase(1600, 512, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "d5be731c954ed7732846bb59dbe3a8e30f83e77a4bff4459f2f1c2b4ecebb8ce67ba01c62e8ab8578d2d499bd1bb276768781190020a306a97de281dcc30305d", "My Tagged Application")]
        [TestCase(32, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "00010203", "1755133f1534752aad0748f2c706fb5c784512cab835cd15676b16c0c6647fa9", "My Tagged Application")]
        [TestCase(1600, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "ff7b171f1e8a2b24683eed37830ee797538ba8dc563f6da1e667391a75edc02c", "")]
        [TestCase(1600, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7", "d5be731c954ed7732846bb59dbe3a8e30f83e77a4bff4459f2f1c2b4ecebb8ce", "My Tagged Application")]
        [TestCase(256, 275, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "b68f14ba54d1223a33d1f736b222bc4e38ead147538e7f4d238af16a8bca297f0c7f04", "My Function")]
        [TestCase(1607, 256, 256, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c748", "1111810380347558199d14901fc268304440243262b5e7a6462ccc9f54ff4dc2", "My Function")]
        [TestCase(256, 256, 2407, "404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c", "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f", "df184001f61a4a86efc452cda2486a40a7715a9c866f8bd60d766c88560d51cb", "My Function")]
        public void ShouldKMACXOF256Correctly(int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customization)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);

            var subject = _kmacFactory.GetKmacInstance(512, true);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Assert.That(result.Success);
            Assert.That(result.Mac, Is.EqualTo(expectedResult));
        }

        [Test]
        [TestCase("Empties", true, 0, 256, 0, "", "", "3f9259e80b35e0719c26025f7e38a4a38172bf1142a6a9c1930e50df03904312", "")]
        [TestCase("From prompt file passing MVT", true, 336, 32, 128,
            "18753DAE584F703687B3EC1A602C8B59",
            "51A088605D4E46E3930017814E6CF8B51FAE1DD866BC9F84F6B3445D5E4FEDED9511DAEAD0C5E3B0E3AC",
            "ED9C5065",
            "a<HBlti")]
        public void ShouldProduceIntermediateValuesForDebuggingKmac128(string label, bool xof, int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customizationString)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);
            var customization = new BitString(Encoding.ASCII.GetBytes(customizationString));

            var subject = _kmacFactory.GetKmacInstance(256, xof);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Console.WriteLine(expectedResult.ToHex());

            Assert.That(result.Success);
            Assert.That(result.Mac.ToHex(), Is.EqualTo(expectedResult.ToHex()));
        }

        [TestCase("tcId 3 https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/342666/json/InternalProjection",
            true, 19288, 1024, 1048,
            "7B3E43EDA8D51EC181D37DDE5B17ECCDD8BE84C268DC6C950070085F48E98EFA97F400260888ED43A0BBAE5E674BD169631D048A22A6EE7B654B769618BE7D2F32E42A2D804FEADD49A6685758D1E17706211DC518C0DFC1228175F36636EA0813062F49C2D88B81E31D4A016711FDDB3FDCCD02C79036612EEC050CD0CDFB94A8CF68",

            "8506FC9B1CF4B1DE588507B4AB8C5E9C4B1E09D4940B0F84C5F54368566E12978D4070908B4A7BE2F07A7C781F3E3D697E88AB6AC03673A7A3AF854C816ED2DC6F113D35FEA0C4A100300FA22F5017AE37E685E2FD3A187362A37AF6227D96F3B7A42D8F1B82C628927C10F2524CC4898BB2707832B4B3694566C26D5414E5B5",
            "km}zS=U8={k/T m")]
        [TestCase("tcId 3 w/o customization https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/342666/json/InternalProjection",
            true, 19288, 1024, 1048,
            "7B3E43EDA8D51EC181D37DDE5B17ECCDD8BE84C268DC6C950070085F48E98EFA97F400260888ED43A0BBAE5E674BD169631D048A22A6EE7B654B769618BE7D2F32E42A2D804FEADD49A6685758D1E17706211DC518C0DFC1228175F36636EA0813062F49C2D88B81E31D4A016711FDDB3FDCCD02C79036612EEC050CD0CDFB94A8CF68",

            "168851349BDA1E6800651F3086C2E74B1D4090767E9CE9334FF7D9BD0D15E137263971F78396FEEDF5299B8D0CB12EB6E0D424B03A14D3313E7B2DE169B5863438EC9BD5A23C54E48C9F4349D5810FC954243E60127D330E905289B9FECC3D273A91649BBE0301CE95A5C48308B4F5D51A6540B81170616B356655E64A7382CB",
            "")]
        [TestCase("tcId 165 https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/342666/json/InternalProjection",
            false, 11616, 3592, 1048,
            "228033A97FFD99A38FA82BF650077A155965BA1DC2A631E27F757D41611F41365C6C695EAE9D69851117AF01081D81F54665CC718681258BDEE146E882ABBB3EA93314D2FCC17A26D6419FE73210C4C65E00EC1C5DEB6A713E651F29C33FC6B0FFE112CCE3E0F532822A5CF0F263F0FE0A0A28495BBA20BB00F8B2F1F3FD503231924B",

            "862A244101CC888EA95F6FCCF70F051D5B991CC15B22837D955AD1E7F52B529D83254A7BD092ED145699D97237E8B6E08F0F4B49C65031A010A746CC27CA40C7E21F2874FDB1C3F65E8C2803514AE0AD7324A2CEB788FB790400DC92B6F632AD06C3541084A2578884938FA72C073DDA72329AAFF22559DA4916118BE96F800453A71C945F822183717EF6B9BE543D1CF3E05C29CF0403EC9B73D34D4CC9E489C6FB01B7B59D54B7CEBA7B71F21CE4F4F072076DA0FA2E9C68BB5636120DEE9D101E12CF707BBB18D568499D3DEAA8C5FE24EF104A57C0A2723070FEF33A1ADEE839ABFF5029F5D1F532EE4B1E5956DE37E1E70A887C391C1FCC95A1B6D5B7CAAF9CC7CD37B1B91033C6FF88666E595074A87C24414590AECD42E15278BF391C981DFF78C64A55F6FE4CB79C511BC0E29665339D38733AD6BF40B0E6B7D6E2835AE14A616A7200AB1B0F64014B5DECA909D3F2A47971835B41ED738E0A2FB1D46A94FE14296F1BF672B0216A0076F9BF380B5E0CAA3BC71C55335F2F2E0A19473F60DC93456A092B618FC0C08C9FD57A09B931561D5947C5F0B36410477AAFA2D34990A36B62DA6C7A5A781312AE7F8962A904BD31038F4D93FFF73FD27E4D639B",
            "lXi29gHF=B496:m5,up,L,")]
        public void ShouldProduceIntermediateValuesForDebuggingKmac256(string label, bool xof, int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customizationString)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);
            var customization = new BitString(Encoding.ASCII.GetBytes(customizationString));

            var subject = _kmacFactory.GetKmacInstance(512, xof);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Console.WriteLine(expectedResult.ToHex());
            Console.WriteLine(result.Mac.ToHex());

            Assert.That(result.Success);
            Assert.That(result.Mac.ToHex(), Is.EqualTo(expectedResult.ToHex()));
        }

        [Test]
        [TestCase("tcId 113 https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/344479/json/InternalProjection",
            true, 496, 3560, 2176,
            "DEB2E497870DBDAE128E4E6F34AC201279E46502AFF0CB6389474245420D00230FC30B6086B8B2DCDA0A9C796C4932D8888714F87A7BD2EA136B4F3AEA98B9AF08BAB96784A8998DDCE07E82DADFCFD9812CDEFCBC09DEC82B900920468FBD588D77593B22B4046683D0015943FE7A1D8B96C9A7F1462662F6DC1C880F1D5EDE39C18054FC5A704BD3CF42E36BD4A44718183EA56EF61A0ECB569692FFD836C6B36C2EE8459335C93B379E0C54F2B88C6F1C6045E4124B67AAC6E73224AB8372DB97D523611363795E22B7B95EC4D4B388BA3E834A125E89908FFBA90C93ECF3F1FDD029A64047AD9FAB58429BDBF7A56FF4C6109F746FACC07B64A8C10224B6645395566A44A84ECBDEF7B9BF1F04F4",
            "BAB00C8681CC817E726F57B896E55366E145AF4916DDCD72EB0F96A011197FF2C0358894FA71D59F8E5F40743FCE77D75BACAD08BFEB95424406F8566B0F",
            "1b1800b1035ccb42bb058485317b5c191fe09177c5b2012428acb7815d27100d777d0cfdfa1ec1c907c881c1fa1fdeee9699c78c6f8e49d1515c786631568b591ddf9103cee7fb624b79f3602e282d133be145a6d32dd198eff51057d4ada3a8e47cb30673abc656f2c40b97dfbd1695d8fd6f0d7e0d0d0f75b9527e17b60bf50cad4f7e52426cc1bc7cb8f58e7e8903c3e11fc414a81926f24fadb77e51c65cddc8fed1512ccb20d0a43210364dbf0f769128ed870146e5e67e6afba9a597a13117a197eeb0e80c8769c53a25fd0813634b6d37ca53817a67738369d56fd9c5525bcc5a126223a7f586cbd73a94610ace67885240d5ec6c2a15b62434b5f6049fbdf1211e0cf5b1561196880625a788e3c9037a603a2edc550d486b2585d3e4cfdc300949086507319a478ba4557ad020a12d907e52e9bee64e7319dd6c5e2cc1aaf466aac025ca86ba4b1c88ca82ad3a302bc789ec099c4838c2a7acd20eaa83e12237015cea302b4027155abf0caec7b7aa0e072b7abb5e063777fd5a4b4e5c6e6995ffe6174344ebc90bf180c44169879449d5ddc305b3caf1f4bbfceb97cbaed8408f190a7b0a3bf8637e833a62ecd13abf77079bc86e0ee86e28",
            "6741BA9B9489CD2A60")]
        [TestCase("tcId 102 submit result https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/344479/json/InternalProjection",
            true, 304, 952, 2352,
            "650CF430C32EBAD40B284B9D0FE3D631412EA94DB5DB7E9C46513C6CAF5D7F3D3E4EAA5789AF2DCCC5BA1B03FBA66F3024BAEC9FC3808A0F647DE0F0FB7F8F272C46437F14FBEB2ECD6CCD40EBE21A264237EB3E84AB8482CDBE5374DDFA3992FB06E615CCB16810F8714B470358CEB7F1BDEB35128A2D125C10307D0CE49F18B4D098B99A0BE42D6DFEC8B2BEE193FE3B5F587C13EE6393C08121B0DFD50FC1230A2996560A174A3AFE23761DEE947EC110521BA5C222DE67EEC4B1561E2C9075E6A0535F540E8E7AFE3F35CCCB81843377CF0B6684A7C45D89EA649991487A34F0419F72C7F6911CB99F4D877F6751525D439E996080B685131A56E62A48194BC7B5331DD4E27616696BE73A2DD878DFD08FE1AB9442E9245E73553E0CFA88A0DA7A5FF746",
            "0E240A787671A8158E0DB1DB5157F2A13EC681586DFE2278053F855E601DF4B80A8E1F85423C",
            "82bb9e22c34a846f5efe008ee2ed98a2f1d88a9ab8be54261d18ad763175b92c6cfca58a0da68b87eda97197601bde64c5c2c11c03f0899f48d8d5a9a5f1216942e6f1c379234d4591bca30158ec8dc68541ccdc3b610c6ec208360a747e42dd30b52890a38cfdb97918b6945f53bce67c011230407340",
            "E1D26B20")]
        // [TestCase("tcId 102 internal projection https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/344479/json/InternalProjection", 
        //     true, 304, 952, 2352, 
        //     "650CF430C32EBAD40B284B9D0FE3D631412EA94DB5DB7E9C46513C6CAF5D7F3D3E4EAA5789AF2DCCC5BA1B03FBA66F3024BAEC9FC3808A0F647DE0F0FB7F8F272C46437F14FBEB2ECD6CCD40EBE21A264237EB3E84AB8482CDBE5374DDFA3992FB06E615CCB16810F8714B470358CEB7F1BDEB35128A2D125C10307D0CE49F18B4D098B99A0BE42D6DFEC8B2BEE193FE3B5F587C13EE6393C08121B0DFD50FC1230A2996560A174A3AFE23761DEE947EC110521BA5C222DE67EEC4B1561E2C9075E6A0535F540E8E7AFE3F35CCCB81843377CF0B6684A7C45D89EA649991487A34F0419F72C7F6911CB99F4D877F6751525D439E996080B685131A56E62A48194BC7B5331DD4E27616696BE73A2DD878DFD08FE1AB9442E9245E73553E0CFA88A0DA7A5FF746", 
        //     "0E240A787671A8158E0DB1DB5157F2A13EC681586DFE2278053F855E601DF4B80A8E1F85423C", 
        //     "E65F71A1BB1DCE6CB653105CC208383B19E9C7910C3B1D738639B5A8CA61A809E5EBFCDD19D51246B518D7DE3F067CBA78EF37AD126CE0A6C001CBC79D43580936B2941850318EFD690629359EBB9152E46CEE7C7F05C6BDC76F8456651DE6536022EE2BF688950A42FB0AB7F11D5BDB5AF133E48AE531", 
        //     "E1D26B20")]
        public void ShouldProduceIntermediateValuesForDebuggingHexCustomizationKmac256(string label, bool xof, int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customizationString)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);
            var customization = new BitString(customizationString);

            var subject = _kmacFactory.GetKmacInstance(512, xof);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Console.WriteLine(expectedResult.ToHex());
            Console.WriteLine(result.Mac.ToHex());

            Assert.That(result.Success);
            Assert.That(result.Mac.ToHex(), Is.EqualTo(expectedResult.ToHex()));
        }

        [Test]
        [TestCase("tcId 102 internal projection https://admin.demo.acvts.nist.gov/api/testSessions/vectorSet/344479/json/InternalProjection",
            true, 304, 952, 2352,
            "650CF430C32EBAD40B284B9D0FE3D631412EA94DB5DB7E9C46513C6CAF5D7F3D3E4EAA5789AF2DCCC5BA1B03FBA66F3024BAEC9FC3808A0F647DE0F0FB7F8F272C46437F14FBEB2ECD6CCD40EBE21A264237EB3E84AB8482CDBE5374DDFA3992FB06E615CCB16810F8714B470358CEB7F1BDEB35128A2D125C10307D0CE49F18B4D098B99A0BE42D6DFEC8B2BEE193FE3B5F587C13EE6393C08121B0DFD50FC1230A2996560A174A3AFE23761DEE947EC110521BA5C222DE67EEC4B1561E2C9075E6A0535F540E8E7AFE3F35CCCB81843377CF0B6684A7C45D89EA649991487A34F0419F72C7F6911CB99F4D877F6751525D439E996080B685131A56E62A48194BC7B5331DD4E27616696BE73A2DD878DFD08FE1AB9442E9245E73553E0CFA88A0DA7A5FF746",
            "0E240A787671A8158E0DB1DB5157F2A13EC681586DFE2278053F855E601DF4B80A8E1F85423C",
            "E65F71A1BB1DCE6CB653105CC208383B19E9C7910C3B1D738639B5A8CA61A809E5EBFCDD19D51246B518D7DE3F067CBA78EF37AD126CE0A6C001CBC79D43580936B2941850318EFD690629359EBB9152E46CEE7C7F05C6BDC76F8456651DE6536022EE2BF688950A42FB0AB7F11D5BDB5AF133E48AE531",
            "E1D26B20")]
        public void DebuggingIssueOnKmacTestingWithHexCustomization(string label, bool xof, int length, int macLength, int keyLen, string key, string inputHex, string outputHex, string customizationString)
        {
            var message = new BitString(inputHex, length, false);
            var expectedResult = new BitString(outputHex, macLength, false);

            /*
                So... this means that we were generating *non* byte bound customizations to use.
                    When the customization was padded for transmission in a file, but no length was included
                    (as byte bound is assumed), the IUT did not arrive at the same value, neither do we when
                    running those same values through a crypto test.
                    
                This test is used to demonstrate the issue, the customization was actually 28 bits long,
                not 32 as the test case would lead you to believe.
             */
            var customization = new BitString(customizationString, 28);

            var subject = _kmacFactory.GetKmacInstance(512, xof);
            var result = subject.Generate(new BitString(key, keyLen, true), message, customization, macLength);

            Console.WriteLine(expectedResult.ToHex());
            Console.WriteLine(result.Mac.ToHex());

            Assert.That(result.Success);
            Assert.That(result.Mac.ToHex(), Is.EqualTo(expectedResult.ToHex()));
        }
    }
}
